interpreter has a call level, call frame linked list, command linked list, and result string.

level is initialized to 0, while an initial call frame is created, command list is NULL, and string is NULL.

A call frame simply maintains a linked list of tcl variables
A tcl variable has a name and value. Both are strings.

The commands implemented are: +, -, *, /, >, >=, <, <=, ==, !=, set, puts, if, while, break, continue, proc, and return.  Isn't it crazy how much that covers?

A command has a name string, function pointer, and a void pointer to "privdata". They are organized as linked lists.  None of the core commands use the privdata.

Every time the eval function is called, a parser structure is created. A parser structure holds a pointer to the current text, the current location of parsing, the remaining length, start, end, and a flag to denote that we are inside quotes.  Also, there is a token type.  It is initialized to PT_EOL



The parser tokenizes the stream first.  This basically involves going through left to right and defining each group of characters with a specific type.  Once a group of input characters is tokenized, they are effectively consumed, so the next token will start where the last left off. The tokens will also set start and end pointers to be used by the actual parsing of the token later.

Examples
0123456789012345678
puts "Hello World"		TOK_ESC(0,3) TOK_SEP(4,4) TOK_ESC(6,16) TOK_EOL(18, 18)
0123456789012345678901234567890123456789

proc cubed {x} {[* $x [* $x $x]]}	
TOK_ESC(0,3) TOK_SEP(4,4) TOK_ESC(5,9) TOK_SEP(10,10) 
TOK_STR(12,12) TOK_SEP(13,13) TOK_STR(15,31) TOK_EOL(32,32)

argv[0] = "proc"
argv[1] = "cubed"
argv[2] = "x"
argv[3] = "[* $x [* $x $x]]"

The argv[2] and arg[3] are stored in privdata as an array of 2 strings.








Notes:

This code uses malloc for all of its allocations.  I need to come up with a block allocator that will prevent fragmentation while keeping wasted memory to a minimum.
Also, the empty string should not take up memory but it shouldn't break with free.

I'd also like to use counted strings in my implementation instead of null terminated strings.
I want to be able to redefine procs unlike the current code
One idea for cacheing the value is to use some of the extra block bytes and a flag on the count byte
